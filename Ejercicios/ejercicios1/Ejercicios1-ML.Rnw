\documentclass{article}
\usepackage[sc]{mathpazo}
\usepackage[T1]{fontenc}
\usepackage{amsmath}
\usepackage[utf8]{inputenc}
\usepackage{geometry}
\geometry{verbose,tmargin=1.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}
\setcounter{secnumdepth}{2}
\setcounter{tocdepth}{2}
\usepackage{url}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\hypersetup{
 pdfstartview={XYZ null null 1}}
\begin{document}
<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
library(ggplot2)
library(grid)
# set global chunk options
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(formatR.arrow=TRUE,width=90)
@


\title{Lista de ejercicios 1}


\author{Curso: T\'opicos de Investigaci\'on : Machine Learning CM-072}
\date{}
\maketitle

\vspace{0.3cm}


\textbf{Lecturas Importantes }
\begin{enumerate}
\item  Notas acerca de ciencia de datos con python  escrito  por Kunal Jain:
\url{http://www.analyticsvidhya.com/blog/2016/01/complete-tutorial-learn-data-science-python-scratch-2/}
\item  \url{http://composingprograms.com/} es un libro online sobre paradigmas y conceptos de introducci\'on a la Ciencia de la Computaci\'on, basados en el Libro de de Abelson y Sussman \texttt{Structure and Interpretation of Computer Programs (SICP)}.
\end{enumerate}
%{\normalsize Los c\'odigos, se presentaran impresos,  o como un archivo con extensi\'on $.R$, mostrando ejemplos de su ejecuci\'on.}
\setlength{\unitlength}{1in}

\begin{picture}(6,.1) 
\put(0,0) {\line(1,0){6.25}}         
\end{picture}

\vspace{0.2cm}

{\Large Python b\'asico }


\vspace{0.3cm}

\begin{enumerate}

\item Escribe una funci\'on en Python, llamada `minmax(data)` que toma una secuencia de uno o m\'as n\'umeros y retorna el menor y el mayor de esos n\'umeros en  forma de tupla de longitud 2. No debes usar la funciones `min` o `max` en tu soluci\'on.
\item Python permite enteros negativos para ser usados en secuencias, como las cadenas. Si una cadena tiene longitud $n$ y la expresi\'on $s[k]$ es usada para \'indices $-n \leq k <0$. ?` Cu\'al es el \'indice quivalente $j \geq 0$ tal que $s[j]$ se refiera al mismo elemento?.
\item Demuestra como usar la sintaxis de las listas por comprensi\'on para producir la lista:

<<foo0,comment = NA, prompt =TRUE, eval= FALSE>>=
list[0,2,6,12,20,30,42,56, 72, 90]
@


\item El m\'odulo `random` de Python incluye la funci\'on `choice(data)` que retorna un elemento aleatorio desde una secuencia. Este m\'odulo incluye la funci\'on `randrange` con una parametrizaci\'on similar a la funci\'on `range` que retorna un valor aleatorio desde un rango dado. Usando solo la funci\'on `randrange`, implementa tu propia versi\'on de la funci\'on `choice`.

\item Escribe en Python una funci\'on que toma una secuencia de n\'umeros y determine si todos los n\'umeros son diferentes uno del otro. 

\item Demuestra como usar la sintaxis de las listas de comprensi\'on en Python para producir la lista:

<<foo1,comment = NA, prompt =TRUE, eval= FALSE>>=
list['a','b','c',.., 'z']
@

sin tener que escribir los 26 caracteres literalmente.

\item Escribe un programa en Python que lee l\'ineas repetidamente desde la entrada est\'andar hasta que un \texttt{EOFError} es lanzado y luego las  salidas de esas l\'ineas en orden inverso.

\item El m\'odulo `random` de Python incluye la funci\'on `shuffle(data)` que acepta  una lista de elementos y los reordena de manera aleatoria de tal forma  los posibles  ordenamientos ocurren con la misma \mbox{probabilidad}. El m\'odulo `random`  incluye la funci\'on `randint(a,b)` que retorna un entero aleatorio uniformemente desde $a$ hasta $b$ (sin tomar los extremos). Usando solo la funci\'on `randint`, \mbox{implementa} tu propia versi\'on de la funci\'on `shuffle`.

\item Un vector $v = (v_1, v_2, \cdots, v_n)$ en un espacio n-dimensional tiene la siguiente norma:

\[
\lVert v \rVert = \sqrt[p]{v_{1}^p + v_{2}^p + \cdots v_{n}^p}.
\]

Realiza una implementaci\'on para esta norma con una funci\'on \texttt{norm(v,p)} que retorna  la norma para una lista de n\'umeros $v$ y un valor $p$ dado.

\item La \texttt{paradoja del cumplea\~nos}  dice que la probabilidad de que dos personas en una habitaci\'on tengan  la misma fecha de nacimiento es m\'as de la mitad, siempre que $n$, el n\'umero de personas en la habitaci\'on, es m\'as de $23$. Dise\~na un programa en python, que ponga a prueba  esta paradoja con una serie de experimentos en los `cumplea\~nos` generados aleatoriamente , que ponen a prueba esta paradoja para $n = 5, 10, 15, 20, \dots, 100$. 

\item Cesar tiene una manera de sumar los valores en una secuencia $A$ de $n$ enteros, donde $n$ es una potencia de dos. El crea una nueva secuencia $B$ de la mitad de tama\~no de $A$ y coloca $B[i] = A[2i] + A[2i + 1]$ para $i = 0, 1, \dots, (n/2) -1$. Si $B$ tiene tama\~no 1, entonces la salida es $B[0]$. De otro modo, el reemplaza $A$ con $B$ y repite el proceso. ?` C\'ual es el tiempo de ejecuci\'on de su algoritmo?.

\item Sea el c\'odigo siguiente

\begin{verbatim}
# Ejemplo de OOP en Python. 

import collections

class Vector:
  """Representa un vector en un espacio multidimensional ."""

  def __init__(self, d):
    if isinstance(d, int):
      self._coords = [0] * d
    else:                                  
      try:                                     
        self._coords = [val for val in d]
      except TypeError:
        raise TypeError('tipo de  parametro invalido ')

  def __len__(self):
    """Returna la dimension del vector."""
    return len(self._coords)

  def __getitem__(self, j):
    """Returna la  j-coordenada del vector."""
    return self._coords[j]

  def __setitem__(self, j, val):
    """Coloca la j-coordenada  del vector a un valor dado ."""
    self._coords[j] = val

  def __add__(self, otro):
    """Returna la suma de dos  vectores."""
    if len(self) != len(otro):          # se basa en el metodo  __len__ 
      raise ValueError('la dimension  debe ser correcta')
    resultado = Vector(len(self))           # empezamos con vectores ceros 
    for j in range(len(self)):
      resultado[j] = self[j] + otro[j]
    return resultado

  def __eq__(self, otro):
    """Returna True si el vector tiene las mismas coordenadas del otro vector ."""
    return self._coords == otro._coords

  def __ne__(self, otro):
    """Returna True si los vectores difieren uno de otro ."""
    return not self == otro             # se basa en  __eq__ 

  def __str__(self):
    """Produce una representation como cadena del vector ."""
    return '<' + str(self._coords)[1:-1] + '>'  

  def __neg__(self):
    """Returna una  copia del vector con las coordenadas  son negativas ."""
    resultado = Vector(len(self))           # empezamos con vectores ceros
    for j in range(len(self)):
      resultado[j] = -self[j]
    return resultado

  def __lt__(self, otro):
    """Compara vectores basados en el orden  lexicografico ."""
    if len(self) != len(otro):
      raise ValueError('la dimension debe ser correcta')
    return self._coords < otro._coords

  def __le__(self, otro):
    """Compara vectores basados en el orden lexicografico."""
    if len(self) != len(otro):
      raise ValueError('la dimension debe ser correcta')
    return self._coords <= otro._coords
\end{verbatim}
\begin{itemize}
\item Implementa el m\'etodo \texttt{\_\_sub\_\_} para el c\'odigo anterior tal que la expresi\'on $u - v$ retorna una nueva instancia vector representando la diferencia entre dos vectores.
\item Implementa el m\'etodo \texttt{\_\_neg\_\_} para el c\'odigo anterior tal que la expresi\'on $-v$ retorna una nueva instancia vector cuyas coordenadas son los valores negativos de las coordenadas del vector $v$.
\item Implementa el m\'etodo \texttt{\_\_mul\_\_} para el c\'odigo anterior tal que la expres\'on $v *3$ retorna un nuevo vector con coordenadas que son 3 veces a las coordenadas del vector $v$.
\item Implementa el m\'etodo \texttt{\_\_mulp\_\_} para el c\'odigo anterior tal que la expres\'on $u *v$ retorna un escalar que representa el producto escalar de los vectores, esto es $\sum_{i=1}^{n}u_i\cdot v_i$.

\end{itemize}
 \end{enumerate}
 

 
\vspace{0.3cm}

{\Large Numpy b\'asico}

\vspace{0.3cm}

\begin{enumerate}
\item Sean los siguientes arrays

\begin{verbatim}
a = np.array([0, 1, 2, 3])
b = np.array([[0, 1, 2], [3, 4, 5]]) 
c = np.array([[[1], [2]], [[3], [4]]])
\end{verbatim}

usa las funciones \texttt{len()} y \texttt{numpy.shape()} sobre esos arrays. ?` C\'omo est\'an relacionados uno del otro?. ?`Qu\'e hay acerca del atributo \texttt{ndim}?.
\item Experimenta con \texttt{arange, linspace,ones, zeros, eye} y \texttt{diag}.
\item Crea diferentes arrays con n\'umeros aleatorios:

\begin{verbatim}
a = np.random.rand(5)  
b = np.random.randn(5) 
\end{verbatim}
prueba con \texttt{seed} antes de crear un array con valores aleatorios.
\item Sea

\begin{verbatim}
np.arange(6) + np.arange(0, 51, 10)[:, np.newaxis]
\end{verbatim}
 usando \texttt{slicing} consigue los siguiente:
 
\begin{verbatim}
array([14, 15])
array([[52, 53, 54, 55]])
array([[30, 31, 32, 33, 34, 35],
       [40, 41, 42, 43, 44, 45],
       [50, 51, 52, 53, 54, 55]])
array([[ 0,  1,  2,  3,  4,  5],
       [10, 11, 12, 13, 14, 15]])
array([[20, 22, 24]])
array([[20, 22, 24],
       [50, 52, 54]])
array([[ 1,  3,  5],
       [31, 33, 35]])
 \end{verbatim}

\item Crea los siguientes arrays

\begin{verbatim}
[[1, 1, 1, 1],
 [1, 1, 1, 1],
 [1, 1, 1, 2],
 [1, 6, 1, 1]]

[[0., 0., 0., 0., 0.],
 [2., 0., 0., 0., 0.],
 [0., 3., 0., 0., 0.],
 [0., 0., 4., 0., 0.],
 [0., 0., 0., 5., 0.],
 [0., 0., 0., 0., 6.]]
\end{verbatim}
\item Usa la funci\'on \texttt{np.tile } para construir el siguiente array:

\begin{verbatim}
[[4, 3, 4, 3, 4, 3],
 [2, 1, 2, 1, 2, 1],
 [4, 3, 4, 3, 4, 3],
 [2, 1, 2, 1, 2, 1]]
\end{verbatim}

\item Multiplica una matriz $5\times3$ por una matriz $3\times2$.

\item Escribe un programa en python, que considere una funci\'on  que genera 10 enteros y los utiliza para construir una matriz.

\item ?` Qu\'e produce el siguiente c\'odigo:

\begin{verbatim}
X, Y = np.meshgrid(np.linspace(-1,1,10), np.linspace(-1,1,10))
D = np.sqrt(X*X+Y*Y)
sigma, mu = 1.0, 0.0
G = np.exp(-( (D-mu)**2 / ( 2.0 * sigma**2 ) ) )
print(G)
\end{verbatim}

\item Considera una matriz aleatoria $10\times 2$ representando coordenadas cartesianas. Escribe un script de python que convierta coordenas cartesianas a coordenadas polares.
\item Dado un n\'umero arbitrario de vectores, dise\~na un programa en Python para construir  el producto cartesiano.
\item ?` Qu\'e hace el siguiente c\'odigo en Python:

\begin{verbatim}
Z = np.random.randint(0,5,(10,10))
n = 3
i = 1 + (Z.shape[0]-3)
j = 1 + (Z.shape[1]-3)
C = stride_tricks.as_strided(Z, shape=(i, j, n, n), strides=Z.strides + Z.strides)
print(C)
\end{verbatim}

\item Considera el vector $[1, 2, 3, 4, 5]$, ?`c\'omo se puede construir  un nuevo vector con 3 ceros consecutivos intercalados entre cada valor?.

\item ?` Qu\'e hace el siguiente c\'odigo en Python:

\begin{verbatim}
def iterate(Z):
    N = (Z[0:-2,0:-2] + Z[0:-2,1:-1] + Z[0:-2,2:] +
         Z[1:-1,0:-2]                + Z[1:-1,2:] +
         Z[2:  ,0:-2] + Z[2:  ,1:-1] + Z[2:  ,2:])

    n = (N==3) & (Z[1:-1,1:-1]==0)
    s = ((N==2) | (N==3)) & (Z[1:-1,1:-1]==1)
    Z[...] = 0
    Z[1:-1,1:-1][n| s] = 1
    return Z

Z = np.random.randint(0,2,(50,50))
for i in range(100): Z = iterate(Z)
\end{verbatim}

\item usando el paquete mayavi, que produce el siguiente c\'odigo en Python:

\begin{verbatim}
import numpy as np 
x,y=np.ogrid[-1:5:0.5:100j, -1.0:1.0:1000j]
z = x +1j*y
julia =np.zeros.(z.shape)
c = -0.7 - 0.4j

for it in range(1,101):
  z = z**2 + c
  es = z*z.conj() >4
  julia += (1/float(it))*es

from mayavi import mlab
mlab.figure(size=(800,600))
mlab.surf(julia,colormap='gist_ncar', warp_scale='auto',vmax=1.5)
mlab.view(15,30,500,[-0.5,-0.5,2.0])
mlab.show()

\end{verbatim}
\end{enumerate}
\end{document}
